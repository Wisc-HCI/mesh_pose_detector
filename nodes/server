#!/usr/bin python3
import rospy
import message_filters
import cv_bridge
from PoseDetector import PoseDetector
import json
from sensor_msgs.msg import CameraInfo
from sensor_msgs.msg import Image
from std_msgs.msg import String, Int32
from pose_detector.msg import DetectedObject, DetectedObjects
from geometry_msgs.msg import Pose
from scipy.spatial.transform import Rotation
import functools
import numpy as np

def detect_poses(detector, pub, color_msg, depth_msg, camera_info):
    
    K = camera_info.K
    bridge = cv_bridge.CvBridge()

    K = np.array(K).reshape(3,3)
    import matplotlib.pyplot as plt
    detected_objects = detector.detect(
        bridge.imgmsg_to_cv2(color_msg).astype(np.uint8)[:,:,:3],
        bridge.imgmsg_to_cv2(depth_msg) * 1000,
        K
    )

    objects_msg = []
    for o in detected_objects:
        msg = DetectedObject()
        msg.mesh_name = String(o.Name)
        msg.mesh_file = String(o.MeshFile)
        bbox = np.array(o.BoundingBox, dtype = np.int)
        mask = o.Mask[bbox[1]:bbox[3], bbox[0]:bbox[2]]
        mask_msg = bridge.cv2_to_imgmsg(mask.astype(np.uint8))
        msg.mask = mask_msg
        msg.mask_offset_x = Int32(bbox[0])
        msg.mask_offset_y = Int32(bbox[1])
        R = Rotation.from_matrix(o.R)
        pose = Pose()
        pose.position.x = o.o[0]
        pose.position.y = o.o[1]
        pose.position.z = o.o[2]
        q = R.as_quat()
        pose.orientation.x = q[0]
        pose.orientation.y = q[1]
        pose.orientation.z = q[2]
        pose.orientation.w = q[3]
        msg.pose = pose

        objects_msg.append(msg)
    response = DetectedObjects()
    response.detected_objects = objects_msg
    pub.publish(response)


def main():
    rospy.init_node('pose_detector')
    import sys
    config_fp = sys.argv[1]
    with open(config_fp) as fin:
        config = json.load(fin)
    detector = PoseDetector(**config)

    colorSub = message_filters.Subscriber('/color', Image)
    depthSub = message_filters.Subscriber('/depth', Image)
    cameraInfoSub = message_filters.Subscriber('/camera_info', CameraInfo)
    pub = rospy.Publisher('/detected_objects', DetectedObjects, queue_size=1)

    ts = message_filters.ApproximateTimeSynchronizer([colorSub, depthSub, cameraInfoSub], 1, 1)
    ts.registerCallback(functools.partial(detect_poses, detector, pub))
    rospy.spin()
    
if __name__ == '__main__':
    main()